
set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake/modules;${CMAKE_MODULE_PATH}")
if (NOT BUILD_SHARED_LIBS)
	set(Boost_USE_STATIC_LIBS ON)
endif()
find_package(Boost COMPONENTS system filesystem serialization REQUIRED)
find_package(OpenGL REQUIRED)
find_package(Freetype REQUIRED)
find_package(FBX REQUIRED)
find_package(SDL2 REQUIRED)
find_package(Doxygen)

set(gintonic_source_files
	Graphics/OpenGL/BufferObject.cpp
	Graphics/OpenGL/ShaderProgram.cpp
	Graphics/OpenGL/VertexArrayObject.cpp
	Graphics/OpenGL/Vertices.cpp
	Graphics/OpenGL/utilities.cpp
	Graphics/OpenGL/TextureObject.cpp
	Graphics/OpenGL/SourceCode.cpp
	Graphics/OpenGL/Framebuffer.cpp
	Graphics/PointShadowBuffer.cpp
	Graphics/skybox.cpp
	Graphics/AnimationClip.cpp
	Graphics/Skeleton.cpp
	Graphics/AmbientLight.cpp
	Graphics/Renderer.cpp
	Graphics/GUI/Base.cpp
	Graphics/GUI/ConsoleView.cpp
	Graphics/GUI/Panel.cpp
	Graphics/GUI/StringView.cpp
	Graphics/GUI/StringPointerView.cpp
	Graphics/Texture2D.cpp
	Graphics/Light.cpp
	Graphics/PointLight.cpp
	Graphics/SpotLight.cpp
	Graphics/Material.cpp
	Graphics/Mesh.cpp
	Graphics/GeometryBuffer.cpp
	Graphics/SpotShadowBuffer.cpp
	Graphics/DirectionalLight.cpp
	Graphics/Font.cpp
	Graphics/ShaderPrograms.cpp
	Graphics/DirectionalShadowBuffer.cpp
	EntityVisitor.cpp
	luabindings.cpp
	Foundation/ReadWriteLock.cpp
	Foundation/exception.cpp
	Foundation/Profiler.cpp
	Foundation/WriteLock.cpp
	Foundation/simd.cpp
	Foundation/Console.cpp
	Foundation/filesystem.cpp
	Foundation/Octree.cpp
	Math/vec3f.cpp
	Math/mat3f.cpp
	Math/mat2f.cpp
	Math/vec2f.cpp
	Math/quatf.cpp
	Math/box2f.cpp
	Math/mat4f.cpp
	Math/SQT.cpp
	Math/vec4f.cpp
	Math/box3f.cpp
	Camera.cpp
	FbxImporter.cpp
	gintonic.cpp
	Entity.cpp
	)

set(lua_src_dir lua-5.3.1/src)
file(GLOB lua_source_files "${lua_src_dir}/*.c")
list(REMOVE_ITEM lua_source_files "${CMAKE_CURRENT_SOURCE_DIR}/${lua_src_dir}/luac.c")
set_source_files_properties(${lua_source_files} PROPERTIES LANGUAGE CXX)


# file(GLOB_RECURSE gintonic_source_files "*.cpp")
set(SSE_VERSION 30 CACHE STRING "The SSE version.")
option(BUILD_DOCUMENTATION "Create and install the HTML based API documentation (requires Doxygen)" ${DOXYGEN_FOUND})
option(WITH_PROFILING "Profile various math functions." OFF)
option(WITH_MEMORY_PROFILING "Profile various memory allocations." OFF)
if (${CMAKE_BUILD_TYPE} STREQUAL Debug)
	option(ENABLE_DEBUG_TRACE "Enable debug tracing via the renderer." ON)
else ()
	option(ENABLE_DEBUG_TRACE "Enable debug tracing via the renderer." OFF)
endif ()
option(HIDE_CONSOLE "Hide the console on Windows." ON)
option(REDIRECT_OUTPUT_WHEN_HIDDEN_CONSOLE "Redirect the standard output to the renderer's error stream." ${ENABLE_DEBUG_TRACE})
option(USE_NEW_CLANG_CPP_LIB "Use libc++ instead of stdlib." OFF)
if (CMAKE_BUILD_TYPE STREQUAL "Debug")
	set(ENABLE_DEBUG_TRACE ON CACHE BOOL "Enable debug tracing via the renderer.")	
endif ()
configure_file(cmake/config.cmake ${CMAKE_CURRENT_BINARY_DIR}/config.hpp)
add_library(gintonic ${gintonic_source_files} ${lua_source_files})
if (WIN32)
	target_compile_definitions(gintonic PUBLIC _SCL_SECURE_NO_WARNINGS)
	target_compile_definitions(gintonic PUBLIC NOMINMAX)
	target_compile_definitions(gintonic PUBLIC _USE_MATH_DEFINES)
	target_compile_definitions(gintonic PUBLIC BOOST_ALL_NO_LIB)
	target_compile_options(gintonic PUBLIC /arch:SSE)
	target_compile_options(gintonic PRIVATE /MP)
else ()
	target_compile_definitions(gintonic PUBLIC LUA_USE_POSIX)
	target_compile_options(gintonic PUBLIC -msse3)
	target_compile_options(gintonic PRIVATE -Wall)
	if (USE_NEW_CLANG_CPP_LIB)
		target_compile_options(gintonic PUBLIC -stdlib=libc++)
	endif ()
endif ()
if (BUILD_DOCUMENTATION)
	configure_file(cmake/Doxyfile.cmake ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)
	add_custom_target(gintonic-doc ALL
		COMMAND ${DOXYGEN_EXECUTABLE} Doxyfile
		WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
		COMMENT "Generating documentation." VERBATIM)
endif()
set_target_properties(gintonic PROPERTIES CXX_STANDARD 14)


if (WIN32 AND HIDE_CONSOLE)
	set_target_properties(gintonic PROPERTIES LINK_FLAGS "/SUBSYSTEM:WINDOWS")
endif ()

target_include_directories(gintonic PUBLIC
	../include
	${CMAKE_CURRENT_BINARY_DIR}/glad/include # Generated by glad
	${SDL2_INCLUDE_DIR}
	${Boost_INCLUDE_DIR}
	${FREETYPE_INCLUDE_DIRS}
	${OPENGL_INCLUDE_DIRS}
	${FBX_INCLUDE_DIR}
	${CMAKE_CURRENT_BINARY_DIR} # For the config file
	../include/${lua_src_dir} # For Lua
	)

# Configure glad
set(GLAD_PROFILE "core" CACHE STRING "OpenGL profile" FORCE)
add_subdirectory(glad)

target_link_libraries(gintonic PUBLIC
	${Boost_LIBRARIES}
	${OPENGL_LIBRARIES}
	${SDL2_LIBRARY}
	${FREETYPE_LIBRARIES}
	${FBX_LIBRARY}
	${CMAKE_DL_LIBS}
	glad)

install(TARGETS gintonic DESTINATION .)
